{"version":3,"file":"static/js/509.745794ab.chunk.js","mappings":"oKAWaA,EAAO,CAClB,CAACC,GAAI,EAAGC,KAAM,KAAMC,IAAK,GAAIC,KAAM,CAAC,iBACpC,CAACH,GAAI,EAAGC,KAAM,KAAMC,IAAK,GAAIC,KAAM,CAAC,iBACpC,CAACH,GAAI,EAAGC,KAAM,KAAMC,IAAK,GAAIC,KAAM,CAAC,iBACpC,CAACH,GAAI,EAAGC,KAAM,KAAMC,IAAK,GAAIC,KAAM,CAAC,iBACpC,CAACH,GAAI,EAAGC,KAAM,OAAQC,IAAK,IAC3B,CAACF,GAAI,EAAGC,KAAM,MAAOC,IAAK,IAC1B,CAACF,GAAI,EAAGC,KAAM,OAAQC,IAAK,IAC3B,CAACF,GAAI,EAAGC,KAAM,MAAOC,IAAK,IAC1B,CAACF,GAAI,EAAGC,KAAM,OAAQC,IAAK,IAC3B,CAACF,GAAI,GAAIC,KAAM,MAAOC,IAAK,IAC3B,CAACF,GAAI,GAAIC,KAAM,OAAQC,IAAK,IAC5B,CAACF,GAAI,GAAIC,KAAM,MAAOC,IAAK,IAC3B,CAACF,GAAI,GAAIC,KAAM,OAAQC,IAAK,IAC5B,CAACF,GAAI,GAAIC,KAAM,MAAOC,IAAK,M,oGCJvBE,EAAqB,CACzB,CAACC,MAAO,KAAMC,UAAW,KAAMC,IAAK,MACpC,CAACF,MAAO,eAAMC,UAAW,OAAQC,IAAK,QACtC,CAACF,MAAO,eAAMC,UAAW,MAAOC,IAAK,OACrC,CACEF,MAAO,OACPE,IAAK,OACLD,UAAW,OACXE,OAAQ,SAACL,GAAD,OACN,0BACGA,EAAOA,EAAKM,KAAI,SAAAC,GACf,IAAIC,EAAgB,iBAARD,EAAe,UAAY,QACvC,OACE,SAAC,IAAD,CAAKC,MAAOA,EAAZ,SACGD,EAAIE,eADiBF,MAIvB,OAIX,CACEL,MAAO,SACPE,IAAK,SACLM,MAAO,IACPL,OAAQ,SAACM,EAAUC,GAAX,OACN,UAAC,IAAD,CAAOC,KAAK,SAAZ,WACE,yCACA,8CAyCR,UAnCsB,WACpB,OAAgCC,EAAAA,EAAAA,YAAhC,eAAOC,EAAP,KAAiBC,EAAjB,KAiBA,OAJAC,EAAAA,EAAAA,YAAU,WAVRC,QAAQC,KAAKvB,EAAAA,GACboB,EAAYpB,EAAAA,KAWX,KAGD,+BACE,SAAC,IAAD,CACEwB,WAAYL,EACZd,QAASA,EACToB,OAAQ,KACRR,KAAK,SACLS,WAAY,CACVC,MAAO,GACPC,eAAgB,EAChBC,gBAAiB,U,+FC9ErBC,EAAUC,IAAAA,OAAa,CAC3BC,QAASC,CAAAA,SAAAA,aAAAA,WAAAA,GAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,mBACrBC,QAAS,MAGXL,EAAQM,aAAaC,QAAQC,KAC3B,SAAAC,GAGE,OAAOA,KAET,SAAAC,GAEE,OAAOC,QAAQC,OAAOF,MAI1BV,EAAQM,aAAaO,SAASL,KAC5B,SAAAK,GACE,GAAuB,MAApBA,EAASC,OAaV,OAHAC,EAAAA,EAAAA,MAAY,CACVvC,MAAO,yCAEFmC,QAAQC,OAAO,wCAZtB,IAAOI,EAAQH,EAAS3C,KAAjB8C,KACP,OAAY,OAATA,GACDC,EAAAA,GAAAA,QAAgB,8FACTN,QAAQC,OAAO,uBACL,MAATI,EAEDL,QAAQC,OAAO,iCAFjB,KAWX,SAAAF,GAKE,OAJAK,EAAAA,EAAAA,MAAY,CACVvC,MAAO,yCAGFmC,QAAQC,OAAOF,MAI1B","sources":["api/user.ts","pages/goodsource/index.tsx","utils/request.ts"],"sourcesContent":["import request from \"../utils/request\";\n\nexport const getUserList = (page: number = 1) => {\n  return request({\n    url: '/admin/userList',\n    params: {\n      page\n    }\n  })\n}\n\nexport const data = [\n  {id: 1, name: 'zs', age: 32, tags: ['停用']},\n  {id: 2, name: 'ls', age: 27, tags: ['启用']},\n  {id: 3, name: 'ww', age: 60, tags: ['启用']},\n  {id: 4, name: 'zs', age: 32, tags: ['启用']},\n  {id: 5, name: 'xixi', age: 32},\n  {id: 6, name: 'hha', age: 32},\n  {id: 7, name: 'xixi', age: 32},\n  {id: 8, name: 'hha', age: 32},\n  {id: 9, name: 'xixi', age: 32},\n  {id: 10, name: 'hha', age: 32},\n  {id: 11, name: 'xixi', age: 32},\n  {id: 12, name: 'hha', age: 32},\n  {id: 13, name: 'xixi', age: 32},\n  {id: 14, name: 'hha', age: 32},\n]","import React, { useEffect, useState } from \"react\"\nimport { Table, Tag, Space } from \"antd\"\nimport { getUserList, data } from \"../../api/user\"\n\ninterface IUser {\n  id: number\n  name: string\n  age: number\n  mobile?: string\n  email?: string\n  tags?: string[]\n}\n\ninterface IColumns {\n  title: string\n  dataIndex?: string\n  key: string\n  width?: number\n  render?: any\n}\n\nconst columns:IColumns[] = [\n  {title: 'ID', dataIndex: 'id', key: 'id'},\n  {title: '名字', dataIndex: 'name', key: 'name'},\n  {title: '年龄', dataIndex: 'age', key: 'age'},\n  {\n    title: 'Tags',\n    key: 'tags',\n    dataIndex: 'tags',\n    render: (tags: string[]) => (\n      <span>\n        {tags ? tags.map(tag => {\n          let color = tag === '停用' ? 'volcano' : 'green';\n          return (\n            <Tag color={color} key={tag}>\n              {tag.toUpperCase()}\n            </Tag>\n          );\n        }) : ''}\n      </span>\n    ),\n  },\n  {\n    title: 'Action',\n    key: 'action',\n    width: 150,\n    render: (_:object, record:any) => (\n      <Space size=\"middle\">\n        <a>编辑</a>\n        <a>删除</a>\n      </Space>\n    ),\n  },\n]\n\nconst App: React.FC = () => {\n  const [userList, setUserList] = useState<IUser[]>()\n\n  const getUserListFn = (page: number = 1) => {\n    console.info(data)\n    setUserList(data)\n    // getUserList(page).then(res => {\n    //   const {data} = res.data.data\n    //   setUserList(data)\n    // }, err => {\n    //   setUserList([])\n    // })\n  }\n\n  useEffect(() => {\n    getUserListFn()\n  }, [])\n\n  return(\n    <>\n      <Table\n        dataSource={userList}\n        columns={columns}\n        rowKey={'id'}\n        size='middle'\n        pagination={{\n          total: 14,\n          defaultCurrent: 1,\n          defaultPageSize: 10\n        }}\n      />\n    </>\n  )\n}\n\nexport default App","import axios from 'axios'\nimport { message, Modal } from 'antd'\n// import NProgress from  'nprogress'\nimport {clear, get} from './storage'\n\nconst service = axios.create({\n  baseURL: process.env.REACT_APP_BASE_API,\n  timeout: 5000\n})\n\nservice.interceptors.request.use(\n  config => {\n    // NProgress.start()\n    // config.headers['Authorization'] = get('token')\n    return config\n  },\n  error => {\n    // NProgress.done()\n    return Promise.reject(error)\n  }\n)\n\nservice.interceptors.response.use(\n  response => {\n    if(response.status === 200) {\n      const {code} = response.data\n      if(code === 4003) {\n        message.warning('登录状态丢失，请退出后重新登录')\n        return Promise.reject('请登录')\n      } else if(code === 4000) {\n        clear()\n        return Promise.reject('认证失败')\n      }\n    } else {\n      Modal.error({\n        title: '网络请求错误'\n      })\n      return Promise.reject('网络请求错误')\n    }\n  },\n  error => {\n    Modal.error({\n      title: '网络请求错误'\n    })\n    // NProgress.done()\n    return Promise.reject(error)\n  }\n)\n\nexport default service\n"],"names":["data","id","name","age","tags","columns","title","dataIndex","key","render","map","tag","color","toUpperCase","width","_","record","size","useState","userList","setUserList","useEffect","console","info","dataSource","rowKey","pagination","total","defaultCurrent","defaultPageSize","service","axios","baseURL","process","REACT_APP_BASE_API","timeout","interceptors","request","use","config","error","Promise","reject","response","status","Modal","code","message"],"sourceRoot":""}